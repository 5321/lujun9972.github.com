#+TITLE: 为子shell设置变量值的两种方法
#+AUTHOR: lujun9972
#+TAGS: shell
#+DATE: [2016-11-17 四 22:33]
#+LANGUAGE:  zh-CN#+OPTIONS:  H:6 num:nil toc:t \n:nil ::t |:t ^:nil -:nil f:t *:t <:nil

为子shell设置变量值有两种方法:

一种很常见的方法是将变量export成环境变量,这样该变量就会被带到子shell中去了
#+BEGIN_SRC sh :exports both :results org
  echo 'echo x=$x' > /tmp/echox
  chmod +x /tmp/echox
  x=Hi
  echo "x不是环境变量的情况下"
  /tmp/echox
  echo 
  echo "x是环境变量的情况下"
  export x
  /tmp/echox
#+END_SRC

#+RESULTS:
#+BEGIN_SRC org
x不是环境变量的情况下
x=

x是环境变量的情况下
x=Hi
#+END_SRC

还有一种不太常见的方法是在一个shell脚本执行的命令行前直接赋值
#+BEGIN_SRC sh :exports both :results org
  echo 'echo x=$x' > /tmp/echox
  chmod +x /tmp/echox
  x=Hi /tmp/echox
#+END_SRC

#+RESULTS:
#+BEGIN_SRC org
x=Hi
#+END_SRC

第二种方法的语法乍看起来有点怪,不过却可以使我们在同一个文件中使用两种不同的机制来改变变量的值.
#+BEGIN_SRC sh  :exports both :results org
  PATH=/usr/bin:/usr/sbin:/bin:/sbin
  echo 'PATH=$PATH:/usr/games $*' >/tmp/games 
  chmod +x /tmp/games

  echo 你可以不改变PATH变量的值,直接用game脚本来运行一个游戏
  /tmp/games fortune
  echo PATH的值为:$PATH

  echo 你也可以用 =. game= 来永久性地PATH变量的值,然后就可以运行游戏了
  . /tmp/games
  echo PATH的值为:$PATH
  fortune
#+END_SRC

#+RESULTS:
#+BEGIN_SRC org
你可以不改变PATH变量的值,直接用game脚本来运行一个游戏
Every why hath a wherefore.
		-- William Shakespeare, "A Comedy of Errors"
PATH的值为:/usr/bin:/usr/sbin:/bin:/sbin
你也可以用 =. game= 来永久性地PATH变量的值,然后就可以运行游戏了
PATH的值为:/usr/bin:/usr/sbin:/bin:/sbin:/usr/games
English literature's performing flea.
		-- Sean O'Casey on P. G. Wodehouse
#+END_SRC

